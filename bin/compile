#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

echo "heroku buildpack ----> https://github.com/janosujvari/heroku-buildpack-nodejs"
unset PKG_CONFIG_PATH
### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p "$BUILD_DIR/.heroku/node/"
cd $BUILD_DIR
export PATH="$BUILD_DIR/.heroku/node/bin":$PATH

### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh

### Handle errors

handle_failure() {
  header "Build failed"
  failure_message | indent
}
trap 'handle_failure' ERR

### Check initial state

[ -e "$BUILD_DIR/node_modules" ] && PREBUILD=true || PREBUILD=false

### Failures that should be caught immediately

fail_invalid_package_json "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
}

header "Creating runtime environment"
create_env # can't indent the whole thing because piping causes subshells; no exporting possible
list_node_config | indent

install_bins() {
  local node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local iojs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.iojs")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  if [ -n "$iojs_engine" ]; then
    echo "engines.iojs (package.json):  $iojs_engine (iojs)"
  else
    echo "engines.node (package.json):  ${node_engine:-unspecified}"
  fi
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo ""

  if [ -n "$iojs_engine" ]; then
    warn_node_engine "$iojs_engine"
    install_iojs "$iojs_engine" "$BUILD_DIR/.heroku/node"
  else
    warn_node_engine "$node_engine"
    install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"
  fi
  install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
  warn_old_npm
}

header "Installing binaries"
install_bins | indent

getandbuild_opencv(){
  # fetch and cache the vulcan build
  # OPENCV_PACKAGE="http://s3.amazonaws.com/tznode/vulcan-compiled-opencv.tgz"

  OPENCV_PACKAGE="http://s3.amazonaws.com/jgtr-heroku/default/opencv2.4.6_standalone.tar.gz"

  OPENCV_PACKAGE_ETAG=$(curl -s --head "$OPENCV_PACKAGE" | grep -Ei '^etag' | sed -r 's/^etag|[^a-zA-Z0-9]+//gi')
  VENDORED_OPENCV="$HOME/vendor/opencv"
  OPENCV_CACHE="$CACHE_DIR/opencv_$OPENCV_PACKAGE_ETAG";

  if [ -d "$OPENCV_CACHE" ]; then
    echo "-----> Reusing cached OpenCV ($OPENCV_PACKAGE_ETAG)"
    cp -a $OPENCV_CACHE $VENDORED_OPENCV
  else
    echo "-----> Fetching and caching OpenCV ($OPENCV_PACKAGE_ETAG)"
    mkdir -p $VENDORED_OPENCV
    curl $OPENCV_PACKAGE -s -o - | tar xzf - -C $VENDORED_OPENCV
    mkdir -p $CACHE_DIR
    cp -a $VENDORED_OPENCV $OPENCV_CACHE
  fi
  ls -l "$VENDORED_OPENCV/opencvinstall/"
  # vendor
  echo "-----> Vendoring OpenCV shared objects into slug"
  VENDORED_SO="$BUILD_DIR/vendor/opencv/lib"
  mkdir -p $VENDORED_SO
  cp -a "$VENDORED_OPENCV/opencvinstall/lib/." $VENDORED_SO
  AAA="$BUILD_DIR/lib"
  mkdir -p $AAA
  # cp -a "$VENDORED_OPENCV/lib/." $AAA
  cp -a "$VENDORED_OPENCV/opencvinstall/." $BUILD_DIR
  export PKG_CONFIG_PATH="/app/lib/pkgconfig"
  echo "PKG_CONFIG_PATH = "$PKG_CONFIG_PATH
  # runtime
  # mkdir -p "$BUILD_DIR/.profile.d"

  file="$BUILD_DIR/.profile.d/opencv.sh"
  [[ -f "$file" ]] && rm -f "$file"

  echo "export LD_LIBRARY_PATH=\"\$HOME/lib\"" > $BUILD_DIR/.profile.d/opencv.sh
  echo "export PKG_CONFIG_PATH=\"\$HOME/lib/pkgconfig\"" >> $BUILD_DIR/.profile.d/opencv.sh

  # # try to add it to $PATH
  # echo "export PATH=\"\$HOME/vendor/opencv/lib:$PATH\"" >> $BUILD_DIR/.profile.d/nodejs.sh
  # echo "export PATH=\"\$HOME/vendor/opencv/lib/pkgconfig:$PATH\"" >> $BUILD_DIR/.profile.d/nodejs.sh
  # echo "export LD_LIBRARY_PATH=\"\$HOME/vendor/opencv/lib:\$LD_LIBRARY_PATH\"" >> $BUILD_DIR/.profile.d/nodejs.sh
  # echo "export PKG_CONFIG_PATH=\"\$HOME/vendor/opencv/lib/pkgconfig/\"" >> $BUILD_DIR/.profile.d/nodejs.sh

  # export LD_LIBRARY_PATH="$HOME/vendor/opencv/lib"
  # export PKG_CONFIG_PATH="$HOME/vendor/opencv/lib/pkgconfig/"

  echo "-----> PATH"
  echo $PATH

  # echo "-----> LD_LIBRARY_PATH"
  # echo $LD_LIBRARY_PATH

  echo "-----> PKG_CONFIG_PATH"
  echo $PKG_CONFIG_PATH

  echo "-----> OpenCV END"
}

header "Fetch and build OpenCV"
getandbuild_opencv | indent



restore_cache() {
  local cache_status=$(get_cache_status)

  if [ "$cache_status" == "disabled" ]; then
    echo "Skipping (cache disabled)"
  elif [ "$cache_status" == "invalidated" ]; then
    echo "Skipping (cache invalidated)"
  else
    local cache_directories=$(get_cache_directories)
    if [ "$cache_directories" == "" ]; then
      echo "Loading 1 from cacheDirectories (default):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" "node_modules"
    else
      echo "Loading $(echo $cache_directories | wc -w | xargs) from cacheDirectories (package.json):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
    fi
  fi
}

header "Restoring cache"
restore_cache | indent

build_dependencies() {
  if $PREBUILD; then
    echo "Prebuild detected (node_modules already exists)"
    rebuild_node_modules "$BUILD_DIR"
  else
    install_node_modules "$BUILD_DIR"
  fi
}

header "Building dependencies"
export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
echo $PKG_CONFIG_PATH
export LD_LIBRARY_PATH="$BUILD_DIR/lib" 
echo $LD_LIBRARY_PATH
 ls -la "$BUILD_DIR/lib/pkgconfig/opencv.pc"
build_dependencies | indent

cache_build() {
  local cache_directories=$(get_cache_directories)
  echo "Clearing previous node cache"
  clear_cache
  if [ "$cache_directories" == "" ]; then
    echo "Saving 1 cacheDirectories (default):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" "node_modules"
  else
    echo "Saving $(echo $cache_directories | wc -w | xargs) cacheDirectories (package.json):"
    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
  fi
}

header "Caching build"
cache_build | indent

summarize_build() {
  cd $BUILD_DIR
  (npm ls --depth=0 | tail -n +2 || true) 2>/dev/null
}

header "Build succeeded!"
summarize_build | indent

export PKG_CONFIG_PATH="/app/lib/pkgconfig":$PKG_CONFIG_PATH
export PATH=$PATH:$PKG_CONFIG_PATH
export LD_LIBRARY_PATH="/app/lib"
echo $PKG_CONFIG_PATH